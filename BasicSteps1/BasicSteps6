# Docker Volumes Practice

# Check actual services and delete them
docker service ls
docker service rm practice_service


# Create new Volume after checking actual volumes
docker volume ls
docker volume create practice_volume
docker volume ls

# Check location where volume is stored
ls /var/lib/docker/volumes/ 

# Create new container with that attached Volume
docker run -d --name contwithvolume -p 8080:80 -v myvolume:/etc/okvol nginx:latest

# Create new container with bind mount volume 
docker run -d --name contwithbindmount -p 8081:80 -v /opt/etc/okvol nginx:latest


# Attach volume to a replicated service after removing previous containers
docker stop contwithbindmount contwithvolume
docker rm contwithbindmount contwithvolume
docker service create -d --name nginxservwithvolume --replicas 11 --publish target=80,published=8080 --mount source=practice_volume,target=/app nginx:latest
docker service ls
docker service ps nginxservwithvolume

#
# Docker Stack Practice

# Remove previous containers
docker ps -a
docker rm contwithvolume2
docker ps -a

# Node was on Drain, set back to Active, remove running service
docker node update --availability active sebastian-1-2
docker service rm nginqservwithvolume

# Create Registry container
docker docker run -d --name private -p 5000:5000 registry:2
docker ps

# Call Registry to check it is empty, it returns an empty registry
curl localhost:5000/v2/_catalog


# Create directory with similar files to previous practice
mkdir stack_practice
cd stackpractice
ls

cp /root/dockerpractice/app.py .
cp /root/dockerpractice/Dockerfile.py .
cp /root/dockerpractice/Dockerfile .
cp /root/dockerpractice/requirements.txt .
cp /root/dockerpractice/docker-compose.yaml .


ls

# Check files also to have them here
vim app.py
# Inside:
from flask import Flask
from redis import Redis
import os
import socket

app = Flask(__name__)
redis = Redis(host=os.environ.get('RESIS_HOST', 'redis'), port=6379)

@app.route('/')
def hello():
    redis.incr('hits')
    return 'Hello everybody, I got hit %s times and my hostname is %s. \n' % (redis.get('hits'),socket.gethostname())

if __name__ == "__main__":
    app.run(host="0.0.0.0", port=5000, debug=True)


vim Dockerfile
# inside:
FROM python:2.7
COPY . /tmp
RUN pip install -r /tmp/requirements.txt
EXPOSE 5000
CMD ["python", "/tmp/app.py"]


vim requirements.txt
# inside:
flask
redis


vim docker-compose.yaml
# inside:
version: "2"
services:
  web:
    build: .
    image: localhost:5000/web:1.0
    ports:
      - "5000:5000"
    volumes:
      - /opt:/etc/lala
    links:
      - redis
    networks:
      - mydockernetwork
  redis:
    image: redis:latest
    expose:
      - 6379
    networks:
      - mydockernetwork
networks:
  mydockernetwork:


# Build the docker compose file, last lines return that the built is successfull, and tagged successfully on localhost:5000/web1.0
docker-compose build

# Pull redis image
docker pull redis
docker images

# Push docker-compose
docker-compose push

# Call Registry to check it, it now returns to have the just created "web" image
curl localhost:5000/v2/_catalog

# Add more desired replicas in docker-compose, also change the version to 3 as it is required for this stack, also change port
vim docker-compose
# inside:
version: "3"
services:
  web:
    build: .
    image: localhost:5000/web:1.0
    ports:
      - "5001:5000"
    deploy:
      replicas: 4
    volumes:
      - /opt:/etc/lala
    links:
      - redis
    networks:
      - mydockernetwork
  redis:
    image: redis:latest
    deploy:
      replicas: 3
    expose:
      - 6379
    networks:
      - mydockernetwork
networks:
  mydockernetwork:


# Deploy Stack
# Return displayes that the network stackpractice_mydockernetwork is created as well as the services stackpractice_web and stackpractice_redis
docker stack deploy --compose-file docker-compose.yaml stackpractice

# Check more details of actual stack, 3 redis containers and 4 web containers have been created and are running
# On the lab they were created on 3 different nodes (1 master and 2 worker nodes)
docker stack services stackpractice

# Show more details of both services
docker service ps stackpractice_redis
docker service ps stackpractice_web

# Delete the created stack, the services are removed
docker stack rm stackpractice
docker ps

